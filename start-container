#!/usr/bin/env bash

# Get/set runtime environment variables
export PUID="${PUID:-1000}" # NOT CURRENTLY USED...
export PGID="${PGID:-1000}" # NOT CURRENTLY USED...

# Run NGINX/FPM as root
export NGINX_USER="root"
export FPMUSER="root"
export FPMGROUP="root"

# Check if MySQL enabled
export ENABLE_MYSQL="${ENABLE_MYSQL:-false}"
export MYSQL_DATABASE="${MYSQL_DATABASE:-m3ue}"
export MYSQL_USER="${MYSQL_USER:-root}"
export MYSQL_PASSWORD="${MYSQL_PASSWORD:-root}"

# Run PHP as root (or m3ue)
export SUPERVISOR_PHP_USER="root"
export APP_URL="${APP_URL:-http://localhost}"
export APP_PORT="${APP_PORT:-36400}" # Default 36400
export REVERB_PORT="${REVERB_PORT:-36800}" # Default 36800
export TZ="${TZ:-UTC}" # Set timezone, default to UTC

# Define the php-fpm command (add "-R" flag to allow php-fpm to run as root)
export SUPERVISOR_PHP_COMMAND="/usr/sbin/php-fpm84 -F -R"

# The queue and websockets
export QUEUE_PHP_COMMAND="/usr/bin/php /var/www/html/artisan horizon"
export WEBSOCKET_PHP_COMMAND="/usr/bin/php /var/www/html/artisan reverb:start --host=0.0.0.0 --port=$REVERB_PORT --no-interaction --no-ansi"

# Make sure the laravel project is installed
if [ ! -f "/var/www/html/artisan" ]; then
    echo "Laravel artisan not found! Make sure project is installed."
    exit 1
fi

# Update template files with variable values
if [ -f /etc/php84/php-fpm.d/www.tmpl ]; then
    # Variables set in container
    envsubst '${FPMUSER} ${FPMGROUP}' < /etc/php84/php-fpm.d/www.tmpl > /etc/php84/php-fpm.d/www.conf
fi
if [ -f /etc/nginx/nginx.tmpl ]; then
    envsubst '${NGINX_USER}' < /etc/nginx/nginx.tmpl > /etc/nginx/nginx.conf
fi
if [ -f /etc/nginx/conf.d/laravel.tmpl ]; then
    # If app url contains https, don't show port
    if [[ "$APP_URL" == *"https"* ]]; then
        echo "‚ö°Ô∏è Starting app at: $APP_URL"
    else
        echo "‚ö°Ô∏è Starting app at: $APP_URL:$APP_PORT"
    fi
    envsubst '${APP_PORT} ${APP_URL}' < /etc/nginx/conf.d/laravel.tmpl > /etc/nginx/conf.d/laravel.conf
fi

# Check for configuration directories and files
config_dir="/var/www/config"
env_file="${config_dir}/env"
db_dir="${config_dir}/database"
db_file="${db_dir}/database.sqlite"
db_file_jobs="${db_dir}/jobs.sqlite"
epg_dir="${config_dir}/epg"
playlist_dir="${config_dir}/playlist"
backup_dir="${config_dir}/m3u-editor-backups"
log_dir="${config_dir}/logs"
queue_log_file="${log_dir}/queue.log"
websockets_log_file="${log_dir}/websocket.log"
laravel_log_file="${log_dir}/laravel.log"
ffmpeg_log_file="${log_dir}/ffmpeg.log"
nginx_log_file="${log_dir}/nginx.log"

# Invalid log files, or files that will be created by the app
swoole_log_file="${log_dir}/swoole_http.log"
reverb_log_file="${log_dir}/reverb.log"
horizon_log_file="${log_dir}/horizon.log"

# Setup timezone
if [ -f "/etc/localtime" ]; then
    rm /etc/localtime
fi
cp "/usr/share/zoneinfo/$TZ" /etc/localtime
echo "$TZ" > /etc/timezone
echo "üìÖ Timezone set to $TZ. Current date/time: $(date)"
echo ""

# Create config directories if needed
if [ ! -d "${config_dir}" ]; then
    echo "-- Missing config directory - please link a director to '/var/www/config' in the container for data persitence"
    exit 0
fi
[ ! -d "${db_dir}" ] && mkdir -p "${db_dir}"
[ ! -d "${epg_dir}" ] && mkdir -p "${epg_dir}"
[ ! -d "${playlist_dir}" ] && mkdir -p "${playlist_dir}"
[ ! -d "${backup_dir}" ] && mkdir -p "${backup_dir}"
[ ! -d "${log_dir}" ] && mkdir -p "${log_dir}"

# Create environment file if missing
if [ ! -f "${env_file}" ]; then
    echo "-- Missing environment file, creating now..."
    cp /var/www/html/.env.example "${env_file}"
fi

# Create database files if missing
[ ! -f "${db_file}" ] && touch "${db_file}"
[ ! -f "${db_file_jobs}" ] && touch "${db_file_jobs}"

# Create log files
[ ! -f "${queue_log_file}" ] && touch "${queue_log_file}"
[ ! -f "${websockets_log_file}" ] && touch "${websockets_log_file}"
[ ! -f "${ffmpeg_log_file}" ] && touch "${ffmpeg_log_file}"
[ ! -f "${nginx_log_file}" ] && touch "${nginx_log_file}"

# Clear out the log content (could build up over time, clean on container reboot)
echo "" > "${queue_log_file}"
echo "" > "${websockets_log_file}"
echo "" > "${ffmpeg_log_file}"
echo "" > "${nginx_log_file}"

# Cleanup
[ -f "${swoole_log_file}" ] && rm -f "${swoole_log_file}"
[ -f "${reverb_log_file}" ] && rm -f "${reverb_log_file}"
[ -f "${horizon_log_file}" ] && rm -f "${horizon_log_file}"
[ -f "${laravel_log_file}" ] && rm -f "${laravel_log_file}"

# Link environment file
ln -sf "${env_file}" .env

# Link db files
ln -sf "${db_file}" "database/database.sqlite"
ln -sf "${db_file_jobs}" "database/jobs.sqlite"

# Link logs
rm -rf storage/logs
ln -sf "${log_dir}" storage/

# Link EPG, Playlist, Backups
[ ! -d "storage/app/private/epg" ] && ln -sf "${epg_dir}" storage/app/private/epg
[ ! -d "storage/app/private/playlist" ] && ln -sf "${playlist_dir}" storage/app/private/playlist
[ ! -d "storage/app/private/m3u-editor-backups" ] && ln -sf "${backup_dir}" storage/app/private/m3u-editor-backups

# Link Laravel storage
if [ ! -d "public/storage" ]; then
    php artisan storage:link
fi

# Set app key if not set
php artisan app:generate-key

# Check for updates
php artisan app:update-check

# Optimize Laravel
php artisan optimize

# Make sure app is "up"
php artisan up

# Set Sqlite WAL mode
echo "üóÇÔ∏è Enabling SQLite WAL mode..."
php artisan sqlite:wal-enable sqlite
echo ""

# Setup MySQL (if enabled)
if [ "${ENABLE_MYSQL}" = "true" ]; then
    # Ensure socket and data directories exist with correct ownership
    mkdir -p /run/mysqld /var/lib/mysql
    chown -R mysql:mysql /run/mysqld /var/lib/mysql

    if [ ! -d /var/lib/mysql/mysql ]; then
        echo "üê¨ Initializing MySQL"
        mariadb-install-db --silent --user=mysql --datadir=/var/lib/mysql
    fi

    # Start mysqld in background
    su-exec mysql mariadbd --datadir=/var/lib/mysql --socket=/run/mysqld/mysqld.sock &
    
    # Wait for it to accept connections
    until mariadb-admin ping --silent; do
        echo "‚è≥ Waiting for DB to start..."
        sleep 1
    done

    # Create database and user (idempotent)
    mariadb -uroot <<-EOSQL
        CREATE DATABASE IF NOT EXISTS \`${MYSQL_DATABASE}\`
            DEFAULT CHARACTER SET utf8mb4
            COLLATE utf8mb4_unicode_ci;

        CREATE OR REPLACE USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASSWORD}';

        GRANT ALL ON \`${MYSQL_DATABASE}\`.* TO '${MYSQL_USER}'@'localhost' WITH GRANT OPTION;
        FLUSH PRIVILEGES;
EOSQL
fi

# Run migrations
echo "üíæ Running migrations..."
php artisan migrate --force

# Build assets
echo "üõ†Ô∏è Building assets..."
npm install && npm run build

# Ensure composer dir is writable
[ ! -d /.composer ] && mkdir /.composer
chmod -R ugo+rw /.composer

# If passed custom commands, execute them, else run supervisord
if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    echo ""
    echo "üöÄ Starting services..."
    echo ""
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi